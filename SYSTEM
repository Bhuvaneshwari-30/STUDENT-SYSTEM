#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
  
// Variable to keep track of
// number of students
int i = 0;
// Structure to store the student
struct sinfo {
    char fname[50];
    char lname[50];
    int roll;
    float cgpa;
    int cid[3];
} st[50];
  
// Function to add the student
void add_student()
{
    
    printf("\nAdd the Students Details\n");
    printf("-------------------------\n");
    printf("Enter First name  : ");
    scanf("%s", st[i].fname);
    printf("Enter Last name   : ");
    scanf("%s", st[i].lname);
    printf("Enter Roll Number : ");
    scanf("%d", &st[i].roll);
  y:printf("Enter CGPA        : ");
    scanf("%f", &st[i].cgpa);
    if(st[i].cgpa<0 || st[i].cgpa>10){
       printf("\nInvalid CGPA. Re-Enter\n");
       goto y;
    }
    printf("Enter Course ID of each course (Courses Available - 1,2,3,4,5):\n");
    x:for (int j = 0; j < 3; j++) {
        scanf("%d", &st[i].cid[j]);
        if(st[i].cid[j]!=1 &&st[i].cid[j]!=2 &&st[i].cid[j]!=3 &&st[i].cid[j]!=4 &&st[i].cid[j]!=5)
           { printf("\nThere are only 5 valid courses available(1,2,3,4,5). Please enter again\n");
             goto x; 
           }
    }
    i = i + 1;
}
  
// Function to find the student
// by the roll number
void find_rl()
{
    int x;
    int c=1;
    printf("\nEnter the Roll Number of the student : ");
    scanf("%d", &x);
    for (int j = 0; j < i; j++) {
        if (x == st[j].roll) {
            c=0;
            printf("\nStudents Details\n");
            printf("----------------\n");
            printf(
                "First name : %s", st[j].fname);
            printf(
                "\nLast name : %s",st[j].lname);
            printf(
                "\nCGPA  : %f",st[j].cgpa);
             printf("\nThe course ID's are : ");
           for (int k = 0; k < 3; k++) {
            printf("%d ",st[j].cid[k]);
        }
            printf("\n");    
        
        //break;
    }
 }
 if(c==1)
  printf("Roll Number not Found\n");
}
  
// Function to find the student
// by the first name
void find_fn()
{
    char a[50];
    printf("\nEnter the First Name of the student : ");
    scanf("%s", a);
    int c = 0;
  
    for (int j = 0; j < i; j++) {
        if (strcmp(st[j].fname, a)==0) {
               
            printf("\nStudents Details\n");
            printf("----------------\n");
            printf(
                "First name : %s",
                st[j].fname);
            printf(
                "\nLast name : %s",
                st[j].lname);
            printf(
                "\nRoll Number : %d ",
                st[j].roll);
            printf(
                "\nCGPA : %f",
                st[j].cgpa);
           printf("\nThe course ID's are : ");
           for (int k = 0; k < 3; k++) {
            printf("%d ",st[j].cid[k]);
            }
            printf("\n");
            c = 1;
        }
    }
    if(c==0)
       printf("Student Not Found");
    printf("\n");
}
  
// Function to find
// the students enrolled
// in a particular course
void find_c()
{
    int id;
    printf("\nEnter the course ID : ");
    scanf("%d", &id);
    int c = 0;
    for (int j = 0; j < i; j++) {
        for (int d = 0; d < 3; d++) {
            if (id == st[j].cid[d]) {
                printf("\n\nStudents Details\n");
                 printf("----------------");
                printf(
                    "\nFirst name : %s",
                    st[j].fname);
                printf(
                    "\nLast name : %s",
                    st[j].lname);
                printf(
                    "\nRoll Number : %d ",
                    st[j].roll);
                printf(
                    "\nCGPA : %f\n",
                    st[j].cgpa);
  
                c=c+1;
  
                break;
            }
        }
    }
    printf("\nTotal number of students in this course : %d\n",c);
}
// Function to print the total
// number of students
void tot_s()
{
    printf("\nTotal number of Students : %d",i);
    printf("\nYou can have a max of 50 students\n");
    printf("You can have %d more students\n",50 - i);
}
  
// Function to delete a student
// by the roll number
void del_s()
{   int fl=1;
    int a;
    printf("\nEnter the Roll Number which you want to delete : ");
    scanf("%d", &a);
    for (int j = 0; j < i; j++) {
        if (a == st[j].roll) {
            fl=0;
            for (int k = j; k <i; k++)
                st[k] = st[k + 1];
           
        }
    }
     if(fl==0){
     i--;
    printf("\nStudent Deleted\n");}
    else
    printf("\nRoll Number not Found\n");
}
  
// Function to update a students data
void up_s()
{
    int fl=1;
    printf("\nEnter the roll number to Update : ");
    long int x;
    scanf("%ld", &x);
    for (int j = 0; j < i; j++) {
        if (st[j].roll == x) { fl=0;
            printf("\nChoose option to update\n"
                   "1. First name\n"
                   "2. Last name\n"
                   "3. Roll no.\n"
                   "4. CGPA\n"
                   "5. Courses\n");
            int z;
            printf("\nYour Choice : ");
            scanf("%d", &z);
            switch (z) {
            case 1:
                printf("\nEnter New "
                       "First name : ");
                scanf("%s", st[j].fname);
                break;
            case 2:
                printf("\nEnter New "
                       "Last name : ");
                scanf("%s", st[j].lname);
                break;
            case 3:
                printf("\nEnter New "
                       "Roll numnber : ");
                scanf("%d", &st[j].roll);
                break;
            case 4:
                printf("\nEnter new CGPA : ");
                scanf("%f", &st[j].cgpa);
                break;
            case 5:
                z:printf("\nEnter the new courses : \n");
                scanf(
                    "%d%d%d", &st[j].cid[0],
                    &st[j].cid[1], &st[j].cid[2]);
                if(st[j].cid[0]!=1 &&st[j].cid[0]!=2 &&st[j].cid[0]!=3 &&st[j].cid[0]!=4 &&st[j].cid[0]!=5)
                  { printf("\nThere are only 5 valid courses available(1,2,3,4,5). Please enter again!\n");
                    goto z; 
                  }
                if(st[j].cid[1]!=1 &&st[1].cid[0]!=2 &&st[j].cid[1]!=3 && st[j].cid[1]!=4 && st[j].cid[1]!=5)
                  { printf("\nThere are only 5 valid courses available(1,2,3,4,5). Please enter again!\n");
                    goto z; 
                  }
                if(st[j].cid[2]!=1 &&st[j].cid[2]!=2 &&st[j].cid[2]!=3 &&st[j].cid[2]!=4 &&st[j].cid[2]!=5)
                  { printf("\nThere are only 5 valid courses available(1,2,3,4,5). Please enter again!\n");
                    goto z; 
                  }
                break;
            }
            printf("\nUPDATED SUCCESSFULLY.\n");
        }
    }
    if(fl==1)
      printf("\nRoll Number not Found\n");
}
void print()
{ int k=0;
  printf("\nALL STUDENT DETAILS\n\n");
  printf("S.no\tRoll No\tFirst Name\tLast Name\tCGPA\t\tCourse Id's\n");
  printf("----\t-------\t----------\t---------\t-----\t\t----------\n");
  for(k=0;k<i;k++)
     { printf("%d.\t%d\t%s\t\t%s\t\t%f\t%d %d %d\n",k+1,st[k].roll,st[k].fname,st[k].lname,st[k].cgpa,st[k].cid[0],st[k].cid[1],st[k].cid[2]);
     }
    
}
// Driver code
void main()
{   int choice,count;
    int flag=1;
    while (flag==1) {
        printf("\nMENU\n");
        printf("----\n");
        printf("1. Add a Student\n");
        printf("2. Search student by Roll Number\n");
        printf("3. Search student by First Name\n");
        printf("4. Search student by Course Id\n");
        printf("5. Total number of Students\n");
        printf("6. Delete a Student\n");
        printf("7. Update Student Details\n");
        printf("8. All Student Details\n");
        printf("9. Exit\n");
        printf("Enter your choice : ");
        scanf("%d", &choice);
        switch (choice) {
        case 1:
            add_student();
            break;
        case 2:
            find_rl();
            break;
        case 3:
            find_fn();
            break;
        case 4:
            find_c();
            break;
        case 5:
            tot_s();
            break;
        case 6:
            del_s();
            break;
        case 7:
            up_s();
            break;
        case 8:
            print();
            break;
        case 9:
            exit(0);
            break;
        default:
            printf("\nInvalid Choice. Re-Enter!");
            break;
          
        }
    }
}

